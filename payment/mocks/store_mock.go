// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package payment is a generated GoMock package.
package payment

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payment "github.com/soundrise/go-payment-system/payment"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CloseAccount mocks base method.
func (m *MockStore) CloseAccount(ac payment.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAccount", ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAccount indicates an expected call of CloseAccount.
func (mr *MockStoreMockRecorder) CloseAccount(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAccount", reflect.TypeOf((*MockStore)(nil).CloseAccount), ac)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(c payment.Customer, accType, currencyCode string, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", c, accType, currencyCode, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(c, accType, currencyCode, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), c, accType, currencyCode, amount)
}

// DumpStore mocks base method.
func (m *MockStore) DumpStore() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpStore")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpStore indicates an expected call of DumpStore.
func (mr *MockStoreMockRecorder) DumpStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpStore", reflect.TypeOf((*MockStore)(nil).DumpStore))
}

// Emit mocks base method.
func (m *MockStore) Emit(amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Emit", amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Emit indicates an expected call of Emit.
func (mr *MockStoreMockRecorder) Emit(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockStore)(nil).Emit), amount)
}

// FindAccount mocks base method.
func (m *MockStore) FindAccount(c payment.Customer, currencyCode string) (payment.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccount", c, currencyCode)
	ret0, _ := ret[0].(payment.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccount indicates an expected call of FindAccount.
func (mr *MockStoreMockRecorder) FindAccount(c, currencyCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccount", reflect.TypeOf((*MockStore)(nil).FindAccount), c, currencyCode)
}

// GetSpecialAccount mocks base method.
func (m *MockStore) GetSpecialAccount(accountPrefix string) (payment.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecialAccount", accountPrefix)
	ret0, _ := ret[0].(payment.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecialAccount indicates an expected call of GetSpecialAccount.
func (mr *MockStoreMockRecorder) GetSpecialAccount(accountPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialAccount", reflect.TypeOf((*MockStore)(nil).GetSpecialAccount), accountPrefix)
}

// Lock mocks base method.
func (m *MockStore) Lock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockStoreMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockStore)(nil).Lock))
}

// PrintStore mocks base method.
func (m *MockStore) PrintStore() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintStore")
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintStore indicates an expected call of PrintStore.
func (mr *MockStoreMockRecorder) PrintStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintStore", reflect.TypeOf((*MockStore)(nil).PrintStore))
}

// PrintStoreJson mocks base method.
func (m *MockStore) PrintStoreJson() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintStoreJson")
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintStoreJson indicates an expected call of PrintStoreJson.
func (mr *MockStoreMockRecorder) PrintStoreJson() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintStoreJson", reflect.TypeOf((*MockStore)(nil).PrintStoreJson))
}

// Rollback mocks base method.
func (m *MockStore) Rollback(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockStoreMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockStore)(nil).Rollback), arg0)
}

// Terminate mocks base method.
func (m *MockStore) Terminate(arg0 payment.Account, arg1 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate.
func (mr *MockStoreMockRecorder) Terminate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockStore)(nil).Terminate), arg0, arg1)
}

// Transfer mocks base method.
func (m *MockStore) Transfer(s, d payment.Account, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", s, d, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockStoreMockRecorder) Transfer(s, d, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockStore)(nil).Transfer), s, d, amount)
}

// TransferJson mocks base method.
func (m *MockStore) TransferJson(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferJson", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferJson indicates an expected call of TransferJson.
func (mr *MockStoreMockRecorder) TransferJson(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferJson", reflect.TypeOf((*MockStore)(nil).TransferJson), arg0)
}

// Unlock mocks base method.
func (m *MockStore) Unlock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockStoreMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockStore)(nil).Unlock))
}
